type token =
  | NUMERAL of float
  | IDENT of string
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | UMINUS
  | LPAREN
  | RPAREN
  | EOF

open Parsing

let _ = parse_error

open Arith_syntax

let yytransl_const =
  [| 259 (* PLUS *); 260 (* MINUS *); 261 (* TIMES *); 262 (* DIVIDE *)
   ; 263 (* UMINUS *); 264 (* LPAREN *); 265 (* RPAREN *); 0 (* EOF *); 0 |]

let yytransl_block = [|257 (* NUMERAL *); 258 (* IDENT *); 0|]

let yylhs =
  "\255\255\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen =
  "\002\000\002\000\001\000\001\000\003\000\003\000\003\000\003\000\002\000\003\000\002\000"

let yydefred =
  "\000\000\000\000\000\000\002\000\003\000\000\000\000\000\010\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\001\000\009\000\000\000\000\000\006\000\007\000"

let yydgoto = "\002\000\007\000\008\000"

let yysindex =
  "\255\255\016\255\000\000\000\000\000\000\016\255\016\255\000\000\010\000\000\000\022\255\016\255\016\255\016\255\016\255\000\000\000\000\255\254\255\254\000\000\000\000"

let yyrindex =
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\003\000\000\000\000\000"

let yygindex = "\000\000\000\000\002\000"
let yytablesize = 272

let yytable =


let yycheck =


let yynames_const =
  "PLUS\000MINUS\000TIMES\000DIVIDE\000UMINUS\000LPAREN\000RPAREN\000EOF\000"

let yynames_block = "NUMERAL\000IDENT\000"

let yyact =
  [| (fun _ -> failwith "parser")
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
       Obj.repr (_1 : Arith_syntax.expression))
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
       Obj.repr (Numeral _1 : 'expression))
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
       Obj.repr (Variable _1 : 'expression))
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
       let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
       Obj.repr (Plus (_1, _3) : 'expression))
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
       let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
       Obj.repr (Minus (_1, _3) : 'expression))
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
       let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
       Obj.repr (Times (_1, _3) : 'expression))
   ; (fun __caml_parser_env ->
       let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
       let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
       Obj.repr (Divide (_1, _3) : 'expression))
   ; (fun __caml_parser_env ->
       let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
       Obj.repr (Negate _2 : 'expression))
   ; (fun __caml_parser_env ->
       let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
       Obj.repr (_2 : 'expression))
     (* Entry toplevel *)
   ; (fun __caml_parser_env ->
       raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0))) |]

let yytables =
  { Parsing.actions= yyact
  ; Parsing.transl_const= yytransl_const
  ; Parsing.transl_block= yytransl_block
  ; Parsing.lhs= yylhs
  ; Parsing.len= yylen
  ; Parsing.defred= yydefred
  ; Parsing.dgoto= yydgoto
  ; Parsing.sindex= yysindex
  ; Parsing.rindex= yyrindex
  ; Parsing.gindex= yygindex
  ; Parsing.tablesize= yytablesize
  ; Parsing.table= yytable
  ; Parsing.check= yycheck
  ; Parsing.error_function= parse_error
  ; Parsing.names_const= yynames_const
  ; Parsing.names_block= yynames_block }

let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
  (Parsing.yyparse yytables 1 lexfun lexbuf : Arith_syntax.expression)
